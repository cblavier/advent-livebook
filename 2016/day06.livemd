# 2016 / Day 6: Signals and Noise

## Puzzle

```elixir
puzzle =
  "./puzzles/day06.txt"
  |> Path.expand(__DIR__)
  |> File.read!()
  |> String.split("\n")
  |> Enum.slice(0..-2)
```

## Part1

Something is jamming your communications with Santa. Fortunately, your signal is only partially jammed, and protocol in situations like this is to switch to a simple repetition code to get the message through.

In this model, the same message is sent repeatedly. You've recorded the repeating message signal (your puzzle input), but the data seems quite corrupted - almost too badly to recover. Almost.

All you need to do is figure out which character is most frequent for each position. For example, suppose you had recorded the following messages:

`````
eedadn
drvtee
eandsr
raavrd
atevrs
tsrnev
sdttsa
rasrtv
nssdts
ntnada
svetve
tesnvt
vntsnd
vrdear
dvrsen
enarar
````

The most common character in the first column is `e`; in the second, `a`; in the third, s, and so on. Combining these characters returns the error-corrected message, `easter`.

Given the recording in your puzzle input, __what is the error-corrected version of the message being sent__?
`````

```elixir
defmodule SignalDecoder do
  def decode(puzzle, sort) do
    puzzle
    |> Enum.map(&String.graphemes/1)
    |> Enum.zip()
    |> Enum.map(&Tuple.to_list/1)
    |> Enum.map(&letter_occurences/1)
    |> Enum.map_join(fn occurences ->
      occurences
      |> Enum.sort_by(&{elem(&1, 1)}, sort)
      |> Enum.at(0)
      |> elem(0)
    end)
  end

  defp letter_occurences(letters) do
    Enum.reduce(letters, %{}, fn letter, acc ->
      Map.update(acc, letter, 1, &(&1 + 1))
    end)
  end
end

SignalDecoder.decode(puzzle, :desc)
```

## Part 2

Of course, that __would__ be the message - if you hadn't agreed to use a __modified repetition code__ instead.

In this modified code, the sender instead transmits what looks like random data, but for each character, the character they actually want to send is __slightly less likely__ than the others. Even after signal-jamming noise, you can look at the letter distributions in each column and choose the __least common__ letter to reconstruct the original message.

In the above example, the least common character in the first column is a; in the second, d, and so on. Repeating this process for the remaining characters produces the original message, advent.

Given the recording in your puzzle input and this new decoding methodology, __what is the original message__ that Santa is trying to send?

```elixir
SignalDecoder.decode(puzzle, :asc)
```
